# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2021, Rapptz & 2021-present, Pycord Development
# This file is distributed under the same license as the Pycord package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Pycord 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-29 10:14+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../quickstart.rst:8
msgid "Quickstart"
msgstr ""

#: ../../quickstart.rst:10
msgid ""
"This page gives a brief introduction to the library. It assumes you have "
"the library installed. If you don't, check the :ref:`installing` portion."
msgstr ""

#: ../../quickstart.rst:14
msgid "A Minimal Bot"
msgstr ""

#: ../../quickstart.rst:16
msgid ""
"Let's make a bot that responds to a specific message and walk you through"
" it."
msgstr ""

#: ../../quickstart.rst:18 ../../quickstart.rst:93
msgid "It looks something like this:"
msgstr ""

#: ../../quickstart.rst:22
msgid ""
"Because this example utilizes message content, it requires the "
":attr:`Intents.message_content` privileged intent."
msgstr ""

#: ../../quickstart.rst:47
msgid ""
"Let's name this file ``example_bot.py``. Make sure not to name it "
"``discord.py`` as that'll conflict with the library."
msgstr ""

#: ../../quickstart.rst:50
msgid "There's a lot going on here, so let's walk you through it step by step:"
msgstr ""

#: ../../quickstart.rst:52
msgid ""
"The first line just imports the library, if this raises a "
"`ModuleNotFoundError` or `ImportError` then head on over to "
":ref:`installing` section to properly install."
msgstr ""

#: ../../quickstart.rst:54
msgid ""
"Next, we create an instance of a :class:`Client`. This client is our "
"connection to Discord."
msgstr ""

#: ../../quickstart.rst:55
msgid ""
"We then use the :meth:`Client.event` decorator to register an event. This"
" library has many events. Since this library is asynchronous, we do "
"things in a \"callback\" style manner."
msgstr ""

#: ../../quickstart.rst:58
msgid ""
"A callback is essentially a function that is called when something "
"happens. In our case, the :func:`on_ready` event is called when the bot "
"has finished logging in and setting things up and the :func:`on_message` "
"event is called when the bot has received a message."
msgstr ""

#: ../../quickstart.rst:61
msgid ""
"Since the :func:`on_message` event triggers for *every* message received,"
" we have to make sure that we ignore messages from ourselves. We do this "
"by checking if the :attr:`Message.author` is the same as the "
":attr:`Client.user`."
msgstr ""

#: ../../quickstart.rst:64
msgid ""
"Afterwards, we check if the :class:`Message.content` starts with "
"``'$hello'``. If it does, then we send a message in the channel it was "
"used in with ``'Hello!'``. This is a basic way of handling commands, "
"which can be later automated with the :doc:`./ext/commands/index` "
"framework."
msgstr ""

#: ../../quickstart.rst:67
msgid ""
"Finally, we run the bot with our login token. If you need help getting "
"your token or creating a bot, look in the :ref:`discord-intro` section."
msgstr ""

#: ../../quickstart.rst:71
msgid ""
"Now that we've made a bot, we have to *run* the bot. Luckily, this is "
"simple since this is just a Python script, we can run it directly."
msgstr ""

#: ../../quickstart.rst:74
msgid "On Windows:"
msgstr ""

#: ../../quickstart.rst:80
msgid "On other systems:"
msgstr ""

#: ../../quickstart.rst:86
msgid "Now you can try playing around with your basic bot."
msgstr ""

#: ../../quickstart.rst:89
msgid "A Minimal Bot with Slash Commands"
msgstr ""

#: ../../quickstart.rst:91
msgid ""
"As a continuation, let's create a bot that registers a simple slash "
"command!"
msgstr ""

#: ../../quickstart.rst:111
msgid ""
"Let's look at the differences compared to the previous example, step-by-"
"step:"
msgstr ""

#: ../../quickstart.rst:113
msgid "The first line remains unchanged."
msgstr ""

#: ../../quickstart.rst:114
msgid ""
"Next, we create an instance of :class:`.Bot`. This is different from "
":class:`.Client`, as it supports slash command creation and other "
"features, while inheriting all the features of :class:`.Client`."
msgstr ""

#: ../../quickstart.rst:116
msgid ""
"We then use the :meth:`.Bot.slash_command` decorator to register a new "
"slash command. The ``guild_ids`` attribute contains a list of guilds "
"where this command will be active. If you omit it, the command will be "
"globally available, and may take up to an hour to register."
msgstr ""

#: ../../quickstart.rst:119
msgid ""
"Afterwards, we trigger a response to the slash command in the form of a "
"text reply. Please note that all slash commands must have some form of "
"response, otherwise they will fail."
msgstr ""

#: ../../quickstart.rst:121
msgid "Finally, we, once again, run the bot with our login token."
msgstr ""

#: ../../quickstart.rst:124
msgid "Congratulations! Now you have created your first slash command!"
msgstr ""

